import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:http/http.dart';
import 'package:multi_image_picker/multi_image_picker.dart';
import 'package:nrnr/http/RequestResult.dart';
import 'package:nrnr/models/ImageData.dart';

class Write extends StatelessWidget {
  final GlobalKey<FormState> _writeKey = GlobalKey<FormState>();
  final scaffoldKey = GlobalKey<ScaffoldState>();
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _rentController = TextEditingController();
  final TextEditingController _depositController = TextEditingController();
  final TextEditingController _homeController = TextEditingController();
  final TextEditingController _ddController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _textController = TextEditingController();

  var result;

  writePost(BuildContext context) async {
    var imageData = await imagePost();
    await postData(imageData, context);
  }

  void showAlertDialog(BuildContext context, String errorMessage) async {
    String result = await showDialog(
      context: context,
      barrierDismissible: false, // user must tap button!
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('글작성성공'),
          content: Text(errorMessage),
          actions: <Widget>[
            FlatButton(
              child: Text('확인'),
              onPressed: () {
                Navigator.pop(context, "확인");
              },
            ),
          ],
        );
      },
    );

    scaffoldKey.currentState
      ..hideCurrentSnackBar()
      ..showSnackBar(
        SnackBar(
          content: Text("Result: $result"),
          backgroundColor: Colors.orange,
          action: SnackBarAction(
            label: "Done",
            textColor: Colors.white,
            onPressed: () {},
          ),
        ),
      );
  }


  postData(imageData, BuildContext context) async {
    List list = new List();
    for(var i=0; i<imageData.length; i++){
      list.add(Autogenerated.fromJson(imageData[i]));
    }
    var jsonData = {
      "title": _titleController.text,
      "city": "busan",
      "address": _addressController.text,
      "deposit": _depositController.text,
      "phone": _phoneController.text,
      "text": _textController.text,
      "home": _homeController.text,
      "period": 1,
      "rent_price": _rentController.text,
      "writer": 1,
      "images":list
    };


    result = await http_post("nrnrs",jsonData);
    reset();
    showAlertDialog(context, "성공성공");



  }
  reset(){
    _titleController.text = '';
    _addressController.text = '';
    _depositController.text = '';
    _phoneController.text = '';
    _textController.text = '';
    _homeController.text = '';
    _rentController.text = '';
    images = null;


  }

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          child: Center(
            child: Column(
              // center the children
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                SizedBox(
                  height: 50,
                ),
                ImagePick(),
                SizedBox(
                  height: 50,
                ),
                _inputForm(size),
                SizedBox(
                  height: 30,
                ),
                Container(
                  child: GestureDetector(
                      onTap: () => {
                            //Todo API통신
                            if (_writeKey.currentState.validate())
                              {
                                writePost(context)
                              }
                          },
                      child: SvgPicture.asset(
                        'assets/images/done.svg',
                        fit: BoxFit.cover,
                        width: size.width * 0.8,
                      )),
                ),
                SizedBox(
                  height: 50,
                )
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<DateTime> getDate(context) {
    // Imagine that this function is
    // more complex and slow.
    return showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2018),
      lastDate: DateTime(2030),
      builder: (BuildContext context, Widget child) {
        return Theme(
          data: ThemeData.light(),
          child: child,
        );
      },
    );
  }

  Widget _inputForm(size) => Padding(
        padding: EdgeInsets.all(size.width * 0.05),
        child: Form(
          key: _writeKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              new TextFormField(
                controller: _titleController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.title),
                    hintText: "제목",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '제목를 입력하세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _addressController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.location_on),
                    hintText: "주소",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '주소를 입력하세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _depositController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.monetization_on),
                    hintText: "보증금",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '보증금를 입력해주세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _rentController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.attach_money),
                    hintText: "월세",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '월세 금액을 입력해주세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _homeController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.home),
                    hintText: "원룸, 투룸",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '룸,오피스텔,아파트';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _ddController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.watch_later),
                    hintText: "1,2",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '달 수를 입력해주세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              new TextFormField(
                controller: _phoneController,
                decoration: new InputDecoration(
                    prefixIcon: Icon(Icons.phone),
                    hintText: "연락 가능한 번호",
                    border: new UnderlineInputBorder(
                        borderSide: new BorderSide(color: Colors.red))),
                validator: (val) {
                  if (val.length == 0) {
                    return '연락 가능한 번호를 입력해주세요';
                  } else {
                    return null;
                  }
                },
                keyboardType: TextInputType.text,
                style: new TextStyle(
                  fontFamily: "Poppins",
                ),
              ),
              SizedBox(height: 30),
              Card(
                  color: Colors.white70,
                  child: Padding(
                    padding: EdgeInsets.all(8.0),
                    child: TextField(
                      controller: _textController,
                      maxLines: 8,
                      decoration: InputDecoration.collapsed(hintText: "상세 내용"),
                    ),
                  )
              )
            ],
          ),
        ),
      );
}

List<Asset> images = List<Asset>();
var jsonTextArray = [];
dynamic imageResponse;
dynamic imageByteArray = [];
var imagesWidget = <Widget>[];

imagePost() async {
  if(images != null) {
    imageByteArray = [];
    imageResponse = [{}];

    for (var i = 0; i < images.length; i++) {
      Asset asset = images[i];
      ByteData byteData = await asset.getByteData();
      List<int> imageData = byteData.buffer.asUint8List();
      imageByteArray.add(new UploadFileInfo.fromBytes(imageData, 'somename$i.jpg'));
    }

    await uploadFile(imageByteArray);
    return imageResponse;
  }
}

class ImagePick extends StatefulWidget {
  @override
  _imagePickState createState() => new _imagePickState();

}

class _imagePickState extends State<ImagePick> {
  String _error;

  @override
  void initState() {
    super.initState();
    imagesWidget = <Widget>[];
    images = null;
    print(imagesWidget);
  }



  List<Widget> imagesWidget = <Widget>[];

  Widget buildGridView(double sizeWidth) {
    if (images != null) {
      imagesWidget = [];
      for (var i = 0; i < images.length; i++) {
        Asset asset = images[i];
        imagesWidget.add(AssetThumb(
          asset: asset,
          width: (sizeWidth / 3).toInt(),
          height: (sizeWidth / 3).toInt()
        ));
      }

      return new Row(
        children: imagesWidget,
      );
    } else
      return Container(color: Colors.white);
  }

  Future<void> loadAssets() async {
    setState(() {
      images = List<Asset>();
    });

    List<Asset> resultList;
    String error;

    try {
      resultList = await MultiImagePicker.pickImages(
        maxImages: 3,
      );
    } on Exception catch (e) {
      error = e.toString();
    }

    // If the widget was removed from the tree while the asynchronous platform
    // message was in flight, we want to discard the reply rather than calling
    // setState to update our non-existent appearance.
    if (!mounted) return;

    setState(() {
      images = resultList;
      if (error == null) _error = 'No Error Dectected';
    });
  }

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    return Column(
      children: <Widget>[
        RaisedButton(
          child: Icon(Icons.add_circle),
          onPressed: loadAssets,
        ),
        if(images != null) Row(
          children: <Widget>[buildGridView(size.width)],
        )
      ],
    );
  }
}

uploadFile(List imageByteArray) async {

  FormData formData = new FormData.from(
      {"files":
      imageByteArray.toList()
      });

  Dio dio = new Dio();
  dio.options.baseUrl = 'http://49.50.163.40:1337';
  var response = await dio.post('/upload', data: formData);

  imageResponse = response.data;

}
